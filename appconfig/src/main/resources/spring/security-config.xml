<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:b="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">


 	<!-- 配置不需要安全管理的界面 -->
 	 <http pattern="/" security="none" />
     <http pattern="/static/**" security="none" />
     <http pattern="/otherlibs/**" security="none" />
     <http pattern="/errorpage/**" security="none" />
     <http pattern="/login.html" security="none" />

        <http use-expressions='true' entry-point-ref="myAuthenticationEntryPoint" access-denied-page="/errorpage/accessDenied.html">
                <session-management>
                        <concurrency-control max-sessions="1"
                                error-if-maximum-exceeded="true" />
                </session-management>
                
                <!-- 认证和授权 --><!-- 重写登陆认证的过滤器，使我们可以拿到任何参数  -->
                <custom-filter ref="customUsernamePasswordAuthenticationFilter" position="FORM_LOGIN_FILTER"/>
                <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
                
                 <!-- 登出管理 -->
        <logout invalidate-session="true" delete-cookies="JSESSIONID" logout-url="/logout" logout-success-url="/login.html"/>
        
        </http>
        
    <!-- 未登录的切入点 --><!-- 需要有个切入点 -->
    <b:bean id="myAuthenticationEntryPoint" class="cn.com.cookie.spring.security.AjaxOrNotAuthenticationEntryPoint">
        <b:property name="loginFormUrl" value="/login.html" />
    </b:bean>
        
    <!-- 登录验证器：用户有没有登录的资格 --><!-- 这个就是重写的认证过滤器 -->
    <b:bean id="customUsernamePasswordAuthenticationFilter" class="cn.com.cookie.spring.security.CustomUsernamePasswordAuthenticationFilter">
    	<b:property name="usernameParameter" value="username"/>
    	<b:property name="passwordParameter" value="password"/>
        <b:property name="authenticationManager" ref="authenticationManager" />
        <b:property name="filterProcessesUrl" value="/login_check" />
        <b:property name="authenticationSuccessHandler">
            <b:bean class="cn.com.cookie.spring.security.AjaxAuthenticationSuccessHandler">
            </b:bean>
        </b:property>
        <b:property name="authenticationFailureHandler">
            <b:bean class="cn.com.cookie.spring.security.AjaxAuthenticationFailureHandler">
            </b:bean>
        </b:property>
    </b:bean>
        
        
        <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，我们的所有控制将在这三个类中实现，解释详见具体配置 -->
        <b:bean id="myFilter"
                class="cn.com.cookie.spring.security.LoginFilterSecurityInterceptor">
                <b:property name="authenticationManager" ref="authenticationManager" />
                <b:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
                <b:property name="securityMetadataSource" ref="securityMetadataSource" />
        </b:bean>
        <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
        <authentication-manager alias="authenticationManager">
                <authentication-provider user-service-ref="myUserDetailService">
                        <!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
                        <password-encoder hash="md5" />
                </authentication-provider>
        </authentication-manager>
        <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
        <b:bean id="myUserDetailService" class="cn.com.cookie.spring.security.MyUserDetailService" />
        <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
        <b:bean id="myAccessDecisionManagerBean"
                class="cn.com.cookie.spring.security.MyAccessDecisionManager">
        </b:bean>
        <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
        <b:bean id="securityMetadataSource"
                class="cn.com.cookie.spring.security.MyInvocationSecurityMetadataSource" />
          
 </b:beans>